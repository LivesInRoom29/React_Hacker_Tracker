{"version":3,"sources":["components/Header.js","components/SearchForm.js","utils/SortArray.js","components/EmployeeTable.js","utils/API.js","components/EmployeeContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","SearchForm","props","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","id","SortArray","array","column","direction","stortedArr","sort","a","b","last","difference","Date","dob","date","EmployeeTable","employees","React","useState","key","sortConfig","setSortConfig","requestSort","sortedEmployees","scope","onClick","map","employee","email","phone","picture","fullName","first","dateDOB","toLocaleDateString","src","medium","alt","axios","get","EmployeeContainer","event","target","toLowerCase","setState","state","searchResults","reduce","accumulator","includes","push","console","log","results","API","then","res","data","catch","err","this","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9b49b3d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"jumbotron jumbotron-fluid text-center\">\r\n      <h1 className=\"display-3\">Hacker Tracker</h1>\r\n      <h2 className=\"subtitle\">Employee Directory</h2>\r\n      <p className=\"lead\">\r\n        Use the search bar to filter results or sort by using the arrows in the heading.\r\n      </p>\r\n    </header>\r\n  )\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction SearchForm(props) {\r\n  return (\r\n    <form className=\"form-inline\">\r\n      <div className=\"form-group w-75\">\r\n        <label htmlFor=\"search\" className=\"search\">Search:</label>\r\n        <input\r\n          onChange={props.handleInputChange}\r\n          value={props.search}\r\n          name=\"search\"\r\n          type=\"text\"\r\n          className=\"form-control w-75\"\r\n          placeholder=\"Search by name, phone, or email\"\r\n          id=\"search\"\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchForm;","const SortArray = (array, column, direction) => {\r\n  // make a shallow copy of the data to sort\r\n  let stortedArr = [...array];\r\n\r\n  if (column !== null) {\r\n    if (column === \"name\") {\r\n      stortedArr.sort((a, b) => {\r\n        if (a[column].last < b[column].last) {\r\n          return direction === \"ascending\" ? -1 : 1;\r\n        } else if (a[column].last > b[column].last) {\r\n          return direction === \"ascending\" ? 1 : -1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (column === \"email\") {\r\n      stortedArr.sort((a, b) => {\r\n        if (a[column] < b[column]) {\r\n          return direction === \"ascending\" ? -1 : 1;\r\n        } else if (a[column] > b[column]) {\r\n          return direction === \"ascending\" ? 1 : -1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (column === \"dob\") {\r\n      stortedArr.sort((a, b) => {\r\n        const difference = new Date(a.dob.date) - new Date (b.dob.date);\r\n        return direction === \"ascending\" ? difference : -difference;\r\n      });\r\n    }\r\n  }\r\n\r\n  return stortedArr;\r\n}\r\n\r\nexport default SortArray;","import React from \"react\";\r\nimport SortArray from \"../utils/SortArray\";\r\n\r\nfunction EmployeeTable(props) {\r\n  const { employees } = props;\r\n  // To add sorting ability; sortConfig is an object that\r\n  // contains a key for what to sort by and a direction for sorting\r\n  const [ sortConfig, setSortConfig ] = React.useState({\r\n    key: \"\",\r\n    direction: \"\"\r\n  });\r\n\r\n  const requestSort = key => {\r\n    let direction = \"ascending\";\r\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\r\n      direction = \"descending\"\r\n    }\r\n\r\n    setSortConfig({ key, direction });\r\n  }\r\n\r\n  const sortedEmployees = SortArray(employees, sortConfig.key, sortConfig.direction);\r\n\r\n\r\n  return (\r\n    <table className=\"table table-striped\">\r\n      <caption>Our Employees</caption>\r\n      <thead className=\"thead-dark\">\r\n        <tr>\r\n          <th scope=\"col\">Picture</th>\r\n          <th scope=\"col\">\r\n            <button className=\"sortbtn\" type=\"button\" onClick={() => requestSort(\"name\")}>\r\n              Name  <i className=\"fas fa-sort\"></i>\r\n            </button>\r\n          </th>\r\n          <th scope=\"col\">Phone</th>\r\n          <th scope=\"col\">\r\n            <button className=\"sortbtn\" type=\"button\" onClick={() => requestSort(\"email\")}>\r\n              Email  <i className=\"fas fa-sort\"></i>\r\n            </button>\r\n          </th>\r\n          <th scope=\"col\">\r\n            <button className=\"sortbtn\" type=\"button\" onClick={() => requestSort(\"dob\")}>\r\n              DOB  <i className=\"fas fa-sort\"></i>\r\n            </button>\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {sortedEmployees.map((employee) => {\r\n          const { name, email, phone, picture, dob } = employee;\r\n          // Format the full name by joining first and last\r\n          const fullName = `${name.first} ${name.last}`;\r\n          // Format the DOB into M/DD/YYYY\r\n          const dateDOB = new Date(dob.date).toLocaleDateString();\r\n          return (\r\n            <tr key={email}>\r\n              <td><img src={picture.medium} alt={fullName} /></td>\r\n              <td>{fullName}</td>\r\n              <td>{phone}</td>\r\n              <td>{email}</td>\r\n              <td>{dateDOB}</td>\r\n            </tr>\r\n          )\r\n\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default EmployeeTable;","import axios from \"axios\";\r\nconst URL = \"https://randomuser.me/api/?results=200&nat=us\";\r\n\r\n// This API does not require a key nor a query string\r\nexport default {\r\n  search: () => axios.get(URL)\r\n};","import React from \"react\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport EmployeeTable from \"./EmployeeTable\";\r\nimport API from \"../utils/API\";\r\n\r\nclass EmployeeContainer extends React.Component {\r\n// set initial state\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      employees: [],\r\n      search: \"\",\r\n      results: [],\r\n    }\r\n  }\r\n\r\n  // when component mounts, get a list of all the employees\r\n  componentDidMount() {\r\n    API.search()\r\n      .then(res => {\r\n        this.setState({\r\n          employees: res.data.results,\r\n          results: res.data.results\r\n        })\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  //when the input changes in the search box, change the value of the search state\r\n  handleInputChange = event => {\r\n    const search = event.target.value.toLowerCase();\r\n    this.setState({ search : search });\r\n\r\n    const employees = this.state.employees;\r\n\r\n    if (search) {\r\n      const searchResults = employees.reduce((accumulator, employee) => {\r\n        if (\r\n          employee.name.first.toLowerCase().includes(search) || employee.name.last.toLowerCase().includes(search) ||\r\n          employee.email.toLowerCase().includes(search) || employee.phone.includes(search)\r\n        ) {\r\n          accumulator.push(employee);\r\n        }\r\n        return accumulator;\r\n      }, []);\r\n      console.log(\"search resutls: \", searchResults);\r\n      this.setState({\r\n        results: searchResults\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <SearchForm\r\n          value={this.state.search}\r\n          handleInputChange={this.handleInputChange}\r\n        />\r\n        <EmployeeTable employees={this.state.results} />\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default EmployeeContainer;","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport EmployeeContainer from \"./components/EmployeeContainer\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <EmployeeContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}